%%%-------------------------------------------------------------------
%%% File    : overview.edoc
%%% Author  : Aleksey Morarash <aleksey.morarash@gmail.com>
%%% Created : 19 Apr 2012
%%% License : FreeBSD
%%% Description : Contents for 'overview' documentation page
%%%               of erjik application
%%%-------------------------------------------------------------------

@author Aleksey Morarash <aleksey.morarash@gmail.com>
@copyright 2013 Aleksey Morarash
@version {{VERSION}}
@title Welcome to erjik - Squid URL rewriter.
@doc == Contents ==

<ol>
 <li>{@section Summary}</li>
 <li>{@section License}</li>
 <li>{@section Building}</li>
 <li>{@section Installing}</li>
 <li>{@section Squid configuration}</li>
 <li>{@section Erjik configuration}</li>
 <li>{@section Running}</li>
 <li>{@section Maintainance}</li>
 <li>{@section Miscellaneous}
  <ol>
   <li>{@section Security considerations}</li>
   <li>{@section Configuration file format}</li>
   <li>{@section Erjik architecture}</li>
  </ol>
 </li>
</ol>

== Summary ==

Erjik - is a multithreaded [http://www.squid-cache.org/ Squid] URL
rewriter written on [http://www.erlang.org/ Erlang] programming language.

Erjik created with following in mind:
<ul>
 <li>multithreaded request processing;</li>
 <li>high tolerance for configuration and runtime errors;</li>
 <li>integration with HTTPD handling redirection pages;</li>
 <li>on-the-fly reconfiguration (without restarting Erjik nor Squid);</li>
</ul>

== License ==

Erjik uses FreeBSD License. You can found full license text on
[http://www.freebsd.org/copyright/freebsd-license.html online]
or read one provided in the file LICENSE on the top of Erjik
source tree.

== Building ==

Erlang must be installed to build and run Erjik. You always can obtain
latest Erlang version on [http://www.erlang.org/download.html Erlang
download page] or use the one provided by your software repository.

Erjik is developed and tested with the Erlang R14A but probably
will work with older Erlang versions.

<code>$ make</code>

== Installing ==

<code>$ sudo make install</code>

== Squid configuration ==

It's more than simple:
<pre><tt>
# Specify Erjik start sequence:
url_rewrite_program /usr/sbin/erjik /etc/erjik.conf

# Enable multithreading mode:
url_rewrite_concurrency 1

# How many instances of URL rewriters will be started.
# Erjik is multithreaded so we need only one instance:
url_rewrite_children 1
</tt></pre>

== Erjik configuration ==

Erjik reads configuration from the file specified in command line.
You will find comprehensive explanations for configuration options
available in the corresponding comments in the file.

== Running ==

Normally Erjik is started by Squid. See 'url_rewrite_program'
configuration in your squid.conf.

== Maintainance ==

To apply new configurations and reopen log file run:

<code># erjik --hup /etc/erjik.conf</code>

To check if Erjik is alive or not, run:

<code># erjik --ping /etc/erjik.conf</code>

== Miscellaneous ==

=== Security considerations ===

<ol>
 <li>Set 'cookie' configuration parameter to something hard to guess.
     Knowing the cookie provides a way to connect to the running
     Erjik instance and execute ANY code with effective user of
     the Erjik instance.</li>
 <li>Erjik's installation procedure knows nothing about your
     system so permissions for /etc/erjik.conf is 0644 by default.
     According to previous thesis, you need to restrict read access
     to the configuration file only to user which will be used to
     run Squid.</li>
</ol>

=== Configuration file format ===

Empty lines and lines with first meaning character '#' (comments)
will be skipped. Comments can take only whole line. You can't
comment the tail of the line.

Configuration parameter value definition must look like key-value
pair, separated by one or more spaces or tabs.

Details for erjik existing configuration parameters you can
found in the /etc/erjik.conf configuration file or in the erjik.conf
example configuration file in the top of Erjik source tree.

=== Erjik architecture ===

Erjik application supervision tree:

<pre><tt>
            erjik_app
          (application)
                |
      erjik_sup (supervisor)
        |   |   |   |   |
 erjik_log  |   |   |   |
            |   |   |   |
     erjik_cfg  |   |   |
                |   |   |
          erjik_re  |   |
                    |   |
           erjik_httpd  |
                |       |
                |      erjik_srv---\
                |                  |
        inets HTTPD engine      request
                |               handler
            arbitrary
        connection handler
</tt></pre><hr/>

<pre>
</pre>
